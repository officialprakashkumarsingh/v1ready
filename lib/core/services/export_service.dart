import 'dart:convert';
import 'dart:typed_data';
import 'dart:ui' as ui;
import 'package:flutter/material.dart';
import 'package:flutter/rendering.dart';
import 'package:share_plus/share_plus.dart';
import 'dart:io';
import 'package:path_provider/path_provider.dart';

class ExportService {
  static Future<void> exportMessageAsImage({
    required BuildContext context,
    required String userMessage,
    required String aiResponse,
    required String modelName,
  }) async {
    try {
      // Show loading
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: const Text('Generating image...'),
          behavior: SnackBarBehavior.floating,
          margin: const EdgeInsets.only(bottom: 100, left: 16, right: 16),
          duration: const Duration(seconds: 1),
        ),
      );

      // Create the export content as a simple text format
      final exportContent = '''
AhamAI Chat Export
Model: $modelName
Time: ${DateTime.now().toString().split('.').first}

User:
$userMessage

AI Response:
$aiResponse

Generated by AhamAI
''';

      // Get temporary directory
      final directory = await getTemporaryDirectory();
      final file = File('${directory.path}/ahamai_chat_${DateTime.now().millisecondsSinceEpoch}.txt');
      
      // Write content to file
      await file.writeAsString(exportContent);
      
      // Share the file
      await Share.shareXFiles([
        XFile(file.path),
      ], text: 'Chat exported from AhamAI');

      // Show success message
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: const Text('Chat exported successfully!'),
          behavior: SnackBarBehavior.floating,
          margin: const EdgeInsets.only(bottom: 100, left: 16, right: 16),
          backgroundColor: Theme.of(context).colorScheme.primary,
          duration: const Duration(seconds: 2),
        ),
      );
    } catch (e) {
      // Handle error
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Export failed: Please try again'),
          behavior: SnackBarBehavior.floating,
          margin: const EdgeInsets.only(bottom: 100, left: 16, right: 16),
          backgroundColor: Theme.of(context).colorScheme.error,
        ),
      );
    }
  }

  // Export generated image
  static Future<void> exportGeneratedImage({
    required BuildContext context,
    required String imageUrl,
    required String prompt,
    required String model,
  }) async {
    try {
      // Show loading
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: const Text('Preparing image for export...'),
          behavior: SnackBarBehavior.floating,
          margin: const EdgeInsets.only(bottom: 100, left: 16, right: 16),
          duration: const Duration(seconds: 1),
        ),
      );

      Uint8List? imageBytes;
      
      // Handle data URL (base64)
      if (imageUrl.startsWith('data:image/')) {
        final base64Data = imageUrl.split(',')[1];
        imageBytes = base64Decode(base64Data);
      } else {
        // Handle network URL - this shouldn't happen with our current implementation
        // but keeping it as fallback
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: const Text('Cannot export network URLs directly'),
            behavior: SnackBarBehavior.floating,
            margin: const EdgeInsets.only(bottom: 100, left: 16, right: 16),
            backgroundColor: Theme.of(context).colorScheme.error,
          ),
        );
        return;
      }

      if (imageBytes != null) {
        // Get temporary directory
        final directory = await getTemporaryDirectory();
        final timestamp = DateTime.now().millisecondsSinceEpoch;
        final file = File('${directory.path}/ahamai_image_$timestamp.png');
        
        // Write image bytes to file
        await file.writeAsBytes(imageBytes);
        
        // Share the image file
        await Share.shareXFiles([
          XFile(file.path),
        ], text: 'Generated by AhamAI\nPrompt: $prompt\nModel: $model');

        // Show success message
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: const Text('Image exported successfully!'),
            behavior: SnackBarBehavior.floating,
            margin: const EdgeInsets.only(bottom: 100, left: 16, right: 16),
            backgroundColor: Theme.of(context).colorScheme.primary,
            duration: const Duration(seconds: 2),
          ),
        );
      }
    } catch (e) {
      // Handle error
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: const Text('Image export failed. Please try again.'),
          behavior: SnackBarBehavior.floating,
          margin: const EdgeInsets.only(bottom: 100, left: 16, right: 16),
          backgroundColor: Theme.of(context).colorScheme.error,
        ),
      );
    }
  }

  // Future enhancement: Image export
  static Future<void> exportAsImageFile({
    required BuildContext context,
    required String userMessage,
    required String aiResponse,
    required String modelName,
  }) async {
    // For now, use text export
    await exportMessageAsImage(
      context: context,
      userMessage: userMessage,
      aiResponse: aiResponse,
      modelName: modelName,
    );
  }
}

class _ExportMessageWidget extends StatelessWidget {
  final String userMessage;
  final String aiResponse;
  final String modelName;
  final ThemeData theme;

  const _ExportMessageWidget({
    required this.userMessage,
    required this.aiResponse,
    required this.modelName,
    required this.theme,
  });

  @override
  Widget build(BuildContext context) {
    return Theme(
      data: theme,
      child: Container(
        width: 400,
        padding: const EdgeInsets.all(24),
        decoration: BoxDecoration(
          color: theme.colorScheme.background,
          borderRadius: BorderRadius.circular(16),
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Header
            Row(
              children: [
                Container(
                  padding: const EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: theme.colorScheme.primary,
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Icon(
                    Icons.chat_bubble_outline,
                    color: theme.colorScheme.onPrimary,
                    size: 16,
                  ),
                ),
                const SizedBox(width: 12),
                Text(
                  'AhamAI Chat Export',
                  style: theme.textTheme.titleMedium?.copyWith(
                    fontWeight: FontWeight.w600,
                  ),
                ),
                const Spacer(),
                Text(
                  modelName,
                  style: theme.textTheme.bodySmall?.copyWith(
                    color: theme.colorScheme.onSurface.withOpacity(0.6),
                  ),
                ),
              ],
            ),
            
            const SizedBox(height: 20),
            
            // User message
            Container(
              width: double.infinity,
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: theme.colorScheme.primary,
                borderRadius: BorderRadius.circular(12).copyWith(
                  bottomRight: const Radius.circular(4),
                ),
              ),
              child: Text(
                userMessage,
                style: theme.textTheme.bodyMedium?.copyWith(
                  color: theme.colorScheme.onPrimary,
                  height: 1.4,
                ),
              ),
            ),
            
            const SizedBox(height: 16),
            
            // AI response
            Container(
              width: double.infinity,
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: theme.colorScheme.surfaceVariant.withOpacity(0.5),
                borderRadius: BorderRadius.circular(12).copyWith(
                  bottomLeft: const Radius.circular(4),
                ),
                border: Border.all(
                  color: theme.colorScheme.outline.withOpacity(0.2),
                  width: 1,
                ),
              ),
              child: Text(
                aiResponse,
                style: theme.textTheme.bodyMedium?.copyWith(
                  color: theme.colorScheme.onSurface,
                  height: 1.4,
                ),
              ),
            ),
            
            const SizedBox(height: 16),
            
            // Footer
            Text(
              'Generated by AhamAI â€¢ ${DateTime.now().toString().split('.').first}',
              style: theme.textTheme.bodySmall?.copyWith(
                color: theme.colorScheme.onSurface.withOpacity(0.5),
              ),
            ),
          ],
        ),
      ),
    );
  }
}